#include <cstddef>
#include <iostream>
#include <cmath>
#include "lib/glad.c"
#include <GLFW/glfw3.h>
#include <math.h>
#include <sstream>
#include <sys/time.h>

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"}\0";
//Fragment Shader source code
const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.35f, 0.35f, 0.35f, 1.0f);\n"
"}\n\0";

int main(){

    int width = 600;
    int height = 400;

    glfwInit();

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLfloat vertices[] = {
        -0.5f, -0.5f * float(std::sqrt(3)) / 3, 0.0f,
        0.5f, -0.5f * float(std::sqrt(3)) / 3, 0.0f,
        0.0f, 0.5f * float(std::sqrt(3)) * 2 / 3, 0.0f
    };

    GLFWwindow* window = glfwCreateWindow(width, height, "asd", NULL, NULL);

    if(window == NULL){
        std::cout << "ERROR OPENING DISPLAY";
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(window);

    gladLoadGL();

    glfwGetWindowSize(window, &width, &height);

    std::cout << width << " - " << height << "\n";

    glViewport(0,0,width,height);

    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);

    GLuint shaderProgram = glCreateProgram();

    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    GLuint VAO, VBO;

    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0,3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
    
    double DI = 1000000000.0/144.0;
    double DELTA = 0.0;

    long int CT;
    long int LT;

    int DC = 0;
    long int TIMER = 0;

    struct timeval tp;
    gettimeofday(&tp, NULL);

    std::cout << tp.tv_usec << " - " << tp.tv_sec;
    std::cout << tp.tv_usec*1000+tp.tv_sec/1000;

    while (!glfwWindowShouldClose(window)) {

        gettimeofday(&tp, NULL);
        CT = tp.tv_sec*1000+tp.tv_usec/1000;
        
        DELTA += (CT-LT)/DI;
        TIMER += (CT-LT);

        //std::cout << "DC -> " << DC << " | TIMER -> " << TIMER << " | CT ->" << CT <<" | LT -> " << LT << "\n";

        LT = CT;

        if(DELTA >= 1){
            glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
            glClear(GL_COLOR_BUFFER_BIT);
            glUseProgram(shaderProgram);
            glBindVertexArray(VAO);
            glDrawArrays(GL_TRIANGLES, 0, 3);
            glfwSwapBuffers(window);
            glfwPollEvents();
            DELTA--;
            DC++;
            //DC++;
            //std::cout << "DC -> " << DC << " | TIMER -> " << TIMER << " | LT -> " << LT << " | CT -> " << CT << "\n";
            //std::cout << "DC -> " << DC << " | TIMER -> " << DELTA << " | CT ->" << CT <<" | LT -> " << LT << "\n";
        }
        std::cout << TIMER << " - " << DC << "\n";
        if(TIMER >= 1000){
            std::stringstream ss;
            ss << "Acorn Engine | alpha 0.1 | FPS: " << DC;
            glfwSetWindowTitle(window, ss.str().c_str());
            //std::cout << "FPS: " << DC;
            TIMER = 0;
            DC = 0;
        }

        
        //std::cout << "DC -> " << DC << " | TIMER -> " << TIMER << "\n";
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(shaderProgram);

    glfwDestroyWindow(window);

    glfwTerminate();
    return 0;
}
